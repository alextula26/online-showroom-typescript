/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= */
/*                                                                  */
/*                              G R I D                            */
/*                                                                */
/* =~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~= */

// Grid system
@mixin make-container() {
  width: 100%;
  @if $grid-gutter-width-base-equal{
    padding-right: ((map-get($grid-gutter-widths, 'xs')) / 2);
    padding-left: ((map-get($grid-gutter-widths, 'xs')) / 2);
  }
  @else{
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
  }
  margin-right: auto;
  margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-container-gutters($gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $grid-gutter-width in $gutters {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      padding-right: ($grid-gutter-width / 2);
      padding-left: ($grid-gutter-width / 2);
    }
  }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
// @if $enable-grid-classes {
//   .container {
//     @include make-container();
//     @include make-container-max-widths();
//     @if $grid-gutter-width-base-equal{
//       @include make-container-gutters();
//     }
//   }
// }


@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}
@function el-breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "#{$name}");
}

@mixin el-make-container-grid($max-widths: $container-max-widths, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints){
  @each $breakpoint in map-keys($breakpoints) {
    $infix: el-breakpoint-infix($breakpoint, $breakpoints);
    $gutterss: map-get($gutters, $infix);
    $widthss: map-get($max-widths, $infix);
    @if $grid-gutter-width-base-equal{
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @if ($gutterss == null){
          padding-right: $gutterss;
          padding-left: $gutterss;
        }
        @else{
          padding-right: $gutterss / 2;
          padding-left: $gutterss / 2;
        }
        max-width: $widthss;
      }
    }
    @else{
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        max-width: $widthss;
      }
    }
  }
}

@if $enable-grid-classes {
  .container{
    @include make-container();
    @include el-make-container-grid();
  }
}
// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

@if $enable-grid-classes {
  .container-fluid {
    @include make-container();
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}
@mixin make-grid-row($gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  display: flex;
  flex-wrap: wrap;
  // margin-right: ($grid-gutter-width-base-xs / -2);
  // margin-left: ($grid-gutter-width-base-xs / -2);
  @each $breakpoint, $grid-gutter-width in $gutters {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      margin-right: ($grid-gutter-width / -2);
      margin-left: ($grid-gutter-width / -2);
    }
  }
}
@mixin make-col-ready() {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}
@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// Row
//
// Rows contain and clear the floats of your columns.

@if $enable-grid-classes {
  .row {
    @if $grid-gutter-width-base-equal{
      @include make-grid-row();
    }
    @else{
      @include make-row();
    }
  }
  // Remove the negative margin from default .row, then the horizontal padding
  // from all immediate children columns (to prevent runaway style inheritance).
  .no-gutters {
    margin-right: 0;
    margin-left: 0;

    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}


// Columns
//
// Common styles for small and large grid columns
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns-paadding($gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  @if $grid-gutter-width-base-equal{
      @each $breakpoint, $grid-gutter-width in $gutters {
        @include media-breakpoint-up($breakpoint, $breakpoints) {
          padding-right: ($grid-gutter-width / 2);
          padding-left: ($grid-gutter-width / 2);
        }
      }
    }
    @else{
      padding-right: ($grid-gutter-width / 2);
      padding-left: ($grid-gutter-width / 2);
    }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px; // Prevent columns from collapsing when empty
    @include make-grid-columns-paadding;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    @if $enable-col-auto{
      .col#{$infix},
      .col#{$infix}-auto {
        @extend %grid-column;
      }
    }
    @else{
      .col#{$infix} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $enable-col-auto{
        .col#{$infix}-auto {
          flex: 0 0 auto;
          width: auto;
          max-width: none; // Reset earlier grid tiers
        }
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      @if $enable-col-order{
        .order#{$infix}-first { order: -1; }

        .order#{$infix}-last { order: $columns + 1; }
        @for $i from 0 through $columns {
          .order#{$infix}-#{$i} { order: $i; }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @if $enable-col-offset{
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

@if $enable-grid-classes {
  @include make-grid-columns();
}